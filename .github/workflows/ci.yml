name: CI

on:
  pull_request:
    branches: [ main ]
    types: [opened, labeled, unlabeled, synchronize]
  push:
    branches: [ main ]

jobs:
  check_label:
    runs-on: sh_devmil_mac
    steps:
      - uses: mheap/github-action-required-labels@v1
        if: github.ref != 'refs/heads/main'
        with:
          mode: exactly
          count: 0
          labels: "not ready"

  get_flutter-version:
    needs: check_label
    runs-on: sh_devmil_mac

    outputs:
      flutter-version: ${{ steps.step_extract_version.outputs.flutter-version }}

    steps:
      - uses: actions/checkout@v3

      - uses: kuhnroyal/flutter-fvm-config-action@v1
        with:
          path: '.fvm/fvm_config.json'

      - id: step_extract_version
        run: |
          flutter-version=${{ env.flutter-version }}
          echo "::set-output name=flutter-version::${flutter-version}"

  get_last_released_version:
    needs: check_label
    runs-on: sh_devmil_mac

    outputs:
      last_released_version: ${{ steps.step1.outputs.last_released_version }}

    steps:
      - id: step1
        name: Get latest version
        run: |
          LAST_VERSION=$(cat last_version.txt)
          echo "::set-output name=last_released_version::${LAST_VERSION}"
#          echo "{LAST_VERSION}=${LAST_VERSION}" >> $GITHUB_ENV


  analysis:
    needs: [check_label, get_flutter-version]
    runs-on: sh_devmil_mac

    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.get_flutter-version.outputs.flutter-version }}
          channel: 'any'
          cache-path: '${{ runner.tool_cache }}/flutter-${{ needs.get_flutter-version.outputs.flutter-version }}-any'

      - name: Verify formatting
        run: dart format --set-exit-if-changed .

      - name: Install dependencies
        run: dart pub get

      - name: Analyze project source
        run: dart analyze

  semver:
    needs: [analysis, get_last_released_version, get_flutter-version]
    uses: devmil/dart_apitool/.github/workflows/check_version.yml@workflowv1
    with:
      runs-on: sh_devmil_mac
      old: "pub://dart_apitool/${{ needs.get_last_released_version.outputs.last_released_version }}"
      new: "."
      flutter-channel: 'any'
      flutter-version: ${{ needs.get_flutter-version.outputs.flutter-version }}

  test:
    needs: [check_label, get_flutter-version]
    strategy:
      matrix:
        platform: [sh_devmil_mac, sh_devmil_win] # , ubuntu-latest
    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.get_flutter-version.outputs.flutter-version }}
          channel: 'any'
          cache-path: '${{ runner.tool_cache }}/flutter-${{ needs.get_flutter-version.outputs.flutter-version }}-any'

      - name: Install dependencies
        run: dart pub get

      - name: Run tests
        run: dart test 

  pana:
    needs: [check_label, get_flutter-version]
    runs-on: sh_devmil_mac

    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ needs.get_flutter-version.outputs.flutter-version }}
          channel: 'any'
          cache-path: '${{ runner.tool_cache }}/flutter-${{ needs.get_flutter-version.outputs.flutter-version }}-any'

      - name: Install Dependencies
        run: |
          dart pub get
          dart pub global activate pana

      - name: Verify Pub Score
        run: |
          dart --version
          flutter --version
          PANA=$(pana . --no-warning); PANA_SCORE=$(echo $PANA | sed -n "s/.*Points: \([0-9]*\)\/\([0-9]*\)./\1\/\2/p")
          echo "score: $PANA_SCORE"
          IFS='/'; read -a SCORE_ARR <<< "$PANA_SCORE"; SCORE=SCORE_ARR[0]; TOTAL=SCORE_ARR[1]
          if (( $SCORE < $TOTAL - 20 )); then echo $PANA; echo "minimum score not met!"; exit 1; fi
