import 'dart:io';

import 'package:dart_apitool/api_tool.dart';
import 'package:path/path.dart' as p;

import '../package_ref.dart';

mixin CommandMixin {
  final packageRefExplanation = '''
Package reference can be one of:
- directory path pointing to a package on disk
  (e.g. /path/to/package)
- an extract file generated by dart-apitool 
  (e.g. packageApi.json)
- any package from pub 
  (e.g. pub://package_name/version)
''';

  Future _runPubGet(String directory) async {
    final runResult = await Process.run(
      Platform.resolvedExecutable,
      [
        'pub',
        'get',
      ],
      workingDirectory: directory,
    );
    if (runResult.exitCode != 0) {
      throw RunDartError(
          'Error running dart pub get in $directory:\n${runResult.stderr}');
    }
  }

  bool _doNothing(String from, String to) {
    if (p.canonicalize(from) == p.canonicalize(to)) {
      return true;
    }
    if (p.isWithin(from, to)) {
      throw ArgumentError('Cannot copy from $from to $to');
    }
    return false;
  }

  Future<void> _copyPath(String from, String to) async {
    if (_doNothing(from, to)) {
      return;
    }
    if (await Directory(to).exists()) {
      await Directory(to).delete();
    }
    await Directory(to).create(recursive: true);
    await for (final file in Directory(from).list(recursive: true)) {
      final copyTo = p.join(to, p.relative(file.path, from: from));
      if (file is Directory) {
        await Directory(copyTo).create(recursive: true);
      } else if (file is File) {
        await File(file.path).copy(copyTo);
      } else if (file is Link) {
        await Link(copyTo).create(await file.target(), recursive: true);
      }
    }
  }

  /// prepares given [ref] and retuns a temporary path when it had to copy the package to
  /// a temporary path. Once you are finished it is up to you to clean up!
  Future<String?> prepare(PackageRef ref) async {
    if (ref.isPackageApiFile) {
      return null;
    }
    if (ref.isDirectoryPath) {
      await _runPubGet(ref.ref);
      return null;
    }
    if (ref.isPubRef) {
      stdout.writeln('Downloading ${ref.pubPackage!}:${ref.pubVersion!}');
      final cachePath = await PubInteraction.installPackageToCache(
          ref.pubPackage!, ref.pubVersion!);
      //Workaround. It seems that the analyzer has problems with no pub get run and it is not possible to run pub get in the cache directory
      final tempDir = await Directory.systemTemp.createTemp();
      await _copyPath(cachePath, tempDir.path);
      await _runPubGet(tempDir.path);
      return tempDir.path;
    }
    throw ArgumentError('Unknown package ref: ${ref.ref}');
  }

  /// Analyzes the given Package [ref].
  /// If [tempPath] is set then this path is analyzed instead of the information from [ref]
  /// and the temporary directory gets deleted afterwards.
  /// [tempPath] is the result of a [prepare] call which created the temporary directory
  Future<PackageApi> analyze(PackageRef ref, String? tempPath) async {
    if (ref.isPackageApiFile) {
      stdout.writeln('Reading $ref');
      final fileContent = await File(ref.ref).readAsString();
      return PackageApiStorage.packageApiFromStorageJson(fileContent);
    }
    String? path;
    if (ref.isDirectoryPath) {
      path = ref.ref;
    }
    if (ref.isPubRef) {
      path = PubInteraction.getPackagePathInCache(
          ref.pubPackage!, ref.pubVersion!);
    }
    if (path == null) {
      throw ArgumentError('Don\'t know how to handle ${ref.ref}');
    }
    stdout.writeln('Analyzing $path');
    final analyzer = PackageApiAnalyzer(packagePath: tempPath ?? path);
    final apiResult = await analyzer.analyze();
    if (tempPath != null) {
      await Directory(tempPath).delete(recursive: true);
    }
    return apiResult;
  }
}
